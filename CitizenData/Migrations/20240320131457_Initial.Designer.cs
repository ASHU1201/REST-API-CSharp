// <auto-generated />
using System;
using CitizenData.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CitizenData.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20240320131457_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CitizenData.Models.Address", b =>
                {
                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AddressLine");

                    b.HasIndex("EntityId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CitizenData.Models.Date", b =>
                {
                    b.Property<string>("DateType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DateType");

                    b.HasIndex("EntityId");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("CitizenData.Models.Entity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deceased")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("CitizenData.Models.Name", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FirstName");

                    b.HasIndex("EntityId");

                    b.ToTable("Name");
                });

            modelBuilder.Entity("CitizenData.Models.Address", b =>
                {
                    b.HasOne("CitizenData.Models.Entity", null)
                        .WithMany("Addresses")
                        .HasForeignKey("EntityId");
                });

            modelBuilder.Entity("CitizenData.Models.Date", b =>
                {
                    b.HasOne("CitizenData.Models.Entity", null)
                        .WithMany("Dates")
                        .HasForeignKey("EntityId");
                });

            modelBuilder.Entity("CitizenData.Models.Name", b =>
                {
                    b.HasOne("CitizenData.Models.Entity", null)
                        .WithMany("Names")
                        .HasForeignKey("EntityId");
                });

            modelBuilder.Entity("CitizenData.Models.Entity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Dates");

                    b.Navigation("Names");
                });
#pragma warning restore 612, 618
        }
    }
}
